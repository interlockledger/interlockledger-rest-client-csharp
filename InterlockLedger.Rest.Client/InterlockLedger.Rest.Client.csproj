<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net8.0</TargetFrameworks>
        <LangVersion>preview</LangVersion>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Copyright>Copyright (c) 2018-2024 InterlockLedger Network</Copyright>
        <Description>
            This library implements a C# wrapper around the InterlockLedger Node REST API.
        </Description>
        <PackageProjectUrl>https://interlockledger.network/</PackageProjectUrl>
        <RepositoryUrl>https://github.com/interlockledger/interlockledger-rest-client-csharp.git</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <PackageTags>REST Client InterlockLedger</PackageTags>
        <PackageIcon>il2.png</PackageIcon>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageLicenseExpression>BSD-3-Clause</PackageLicenseExpression>
        <Authors>InterlockLedger Network</Authors>
        <Product>InterlockLedger</Product>
        <ImplicitUsings>Enable</ImplicitUsings>
        <Nullable>Enable</Nullable>
    </PropertyGroup>

    <ItemGroup>
        <Using Include="InterlockLedger.Rest.Client.Abstractions" />
        <Using Include="InterlockLedger.Tags" />
        <Using Include="System.Security.Cryptography" />
        <Using Include="System.Security.Cryptography.X509Certificates" />
        <Using Include="System.Text" />
        <Using Include="System.Text.Json" />
        <Using Include="System.Text.Json.Serialization" />
        <Using Include="System.Text.RegularExpressions" />
        <Using Include="System.Web" />
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="InterlockLedger.Tags.ILInt" Version="14.0.0" />
    </ItemGroup>

    <ItemGroup>
        <None Include="..\LICENSE">
            <Pack>True</Pack>
            <PackagePath></PackagePath>
        </None>
        <None Include="..\il2.png">
            <Pack>True</Pack>
            <PackagePath></PackagePath>
        </None>
        <None Include="..\README.md">
            <Pack>True</Pack>
            <PackagePath></PackagePath>
        </None>
    </ItemGroup>
    <Target Name="TagSources">
        <Exec Command="git tag v$(Version)" ContinueOnError="true" StandardErrorImportance="low" StandardOutputImportance="low" IgnoreExitCode="true" />
        <Message Importance="high" Text="Recent tags:" />
        <Exec Command="git tag --sort=-creatordate | grep v | head -n 1" ContinueOnError="true" StandardErrorImportance="high" StandardOutputImportance="high" IgnoreExitCode="true" />
    </Target>

    <Target Name="PublishLocally" AfterTargets="Pack" Condition="Exists('$(INTERLOCK_LOCAL_NUGETS_FOLDER)')">
        <ItemGroup>
            <NugetPackages Include="$(PackageOutputAbsolutePath)\*.nupkg" />
        </ItemGroup>
        <Message Importance="high" Text="Publish to Local Nugets Folder '$(INTERLOCK_LOCAL_NUGETS_FOLDER)'" />
        <Copy DestinationFolder="$(INTERLOCK_LOCAL_NUGETS_FOLDER)" SourceFiles="@(NugetPackages)" ContinueOnError="true" SkipUnchangedFiles="false" />
    </Target>

    <Target Name="NugetOrg" Condition="'$(Configuration)'=='Release'" DependsOnTargets="Pack">
        <PropertyGroup>
            <NugetPackage>$(PackageOutputAbsolutePath)$(PackageId).$(Version).nupkg</NugetPackage>
        </PropertyGroup>
        <Message Importance="high" Text="Pushing $(NugetPackage)" Condition="Exists('$(NugetPackage)')" />
        <Exec Command="dotnet nuget push --skip-duplicate -s nuget.org $(NugetPackage)" ContinueOnError="true" StandardErrorImportance="high" StandardOutputImportance="high" IgnoreExitCode="true" Condition="Exists('$(NugetPackage)')" />
    </Target>

</Project>
